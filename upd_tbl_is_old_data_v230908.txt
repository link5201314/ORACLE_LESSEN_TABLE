--Copy From upd_tbl_is_old_data_v230908.txt
--可能要考慮v_find_oldest_date_sql_text沒有合適找到最舊日期的SQL(也有可能查詢無值)，
--要有備案能接受提供指定日期，或是採用預設default的方法
drop PROCEDURE TRW.USP_UPD_TBL_IS_OLD_DATA;

CREATE OR REPLACE PROCEDURE TRW.USP_UPD_TBL_IS_OLD_DATA(
    in_is_old_data BOOLEAN,
    in_less_than_months POSITIVEN,
	in_tablename VARCHAR2
)
AS 
	-- *******************************************

	-- 過程名： USP_UPD_TBL_IS_OLD_DATA

	-- 功能描述： 根據LESSEN_TABLE的內容，以及Prcedure傳入參數(以系統別為主)，設定指定table的is_old_data欄位

	-- 輸入參數說明： in_is_old_data BOOLEAN, in_less_than_months POSITIVEN, in_tablename VARCHAR2

	-- 輸出參數說明： 設定is_old_data值[Y/N], 設定多少個月前的資料(正整數), 指定表格名稱

	-- 調用的過程或函數：  N/A

	-- 建立人員： 劉璟宏

	-- 建立日期： 2023/03/09

	-- 修改人員：

	-- 修改日期：

	-- 修改原因：

	-- 修改結果：

	-- 版本說明： v230309_1

	-- ********** *********************************
    cur_upd_LESSEN_TABLE NUMBER;
    CURSOR cur_sel_LESSEN_TABLE IS select * from LESSEN_TABLE;
    v_chr_is_old_data CHAR(1);
    v_set_is_old_data CHAR(1);
    v_reverse_is_old_data CHAR(1);
    v_job_id NUMBER(10);
    v_user_id VARCHAR2(30); v_sess_id NUMBER(10); v_client_ip VARCHAR2(20); v_client_name VARCHAR2(150); v_client_machine VARCHAR2(150);
    v_table_name VARCHAR2(50);
    v_sys_owner VARCHAR2(10);
    v_is_enable CHAR(1);
	v_oldest_date_strategy NUMBER(1);
	v_customer_oldest_date DATE;
    v_find_oldest_date_sql_text VARCHAR2(200);
    v_oldest_date DATE;
    v_baseline_date DATE;
    v_diffdates INTEGER;
    l_counter NUMBER := 0;   
    v_sql_text VARCHAR2(2000);
	v_sql_para VARCHAR2(500);
    v_start_date DATE; v_end_date DATE; v_default_oldest_date DATE := TO_DATE('2019-01-01', 'YYYY-MM-DD');
    v_row NUMBER;
    v_funcstart TIMESTAMP := SYSTIMESTAMP;
    v_timestart TIMESTAMP; v_timeend TIMESTAMP; v_elapsed INTERVAL DAY(2) TO SECOND(3);
	v_lv2_error_occurred BOOLEAN := FALSE; v_lv3_error_occurred BOOLEAN := FALSE; v_haserror BOOLEAN := FALSE; v_not_found_error BOOLEAN := TRUE;
    v_err_code NUMBER; v_err_msg VARCHAR2(4000);
BEGIN    
	--DBMS_OUTPUT.ENABLE (buffer_size => NULL); --使DBMS_OUTPUT的buff_size無限制
	DBMS_OUTPUT.ENABLE (1000000); --使DBMS_OUTPUT的buff_size為1000000
    IF in_is_old_data THEN
        v_chr_is_old_data := 'Y';
        v_set_is_old_data := 'Y';
        v_reverse_is_old_data := 'N';
    ELSE
        v_chr_is_old_data := 'N';
        v_set_is_old_data := 'N';
        v_reverse_is_old_data := 'Y';
    END IF;
    
	--正式區啟用
    --IF in_less_than_months < 39 THEN
    --    RAISE_APPLICATION_ERROR(-20001, '輸入參數in_less_than_months[ ' || in_less_than_months || ' ]超出範圍[ <36 ]，請改使用USP_UPD_TBL_RANGE_IS_OLD_DATA函式!');
    --END IF;
    
    select USER, SYS_CONTEXT('USERENV', 'SID'), SYS_CONTEXT('USERENV','IP_ADDRESS'), SYS_CONTEXT('USERENV','OS_USER'), SYS_CONTEXT('USERENV','HOST')
    into v_user_id,v_sess_id,v_client_ip,v_client_name,v_client_machine
    from dual;
    SELECT LESSEN_TABLE_EXEC_SQ.nextval into v_job_id FROM DUAL;
    DBMS_OUTPUT.PUT_LINE('JOB_ID='|| v_job_id ||'; USER_ID=' || v_user_id || '; SESS_ID=' || v_sess_id || '; CLIENT_IP=' || v_client_ip 
	|| '; CLIENT_NAME=' || v_client_name || '; CLIENT_MACHINE=' || v_client_machine);
    
    INSERT INTO LESSEN_TABLE_EXEC_JOB 
    VALUES(v_job_id, 'RUNNING', 'USP_UPD_TBL_IS_OLD_DATA', v_funcstart, null, v_chr_is_old_data, in_less_than_months, NULL, in_tablename, NULL
	, v_user_id, v_sess_id, v_client_ip , v_client_name, v_client_machine, NULL, NULL);
    commit;
    
    select trunc(add_months(SYSDATE, - in_less_than_months)) into v_baseline_date from dual;
    
	v_lv2_error_occurred := FALSE;
    FOR sql_list IN cur_sel_LESSEN_TABLE LOOP
    BEGIN
		v_table_name := sql_list.PK_LESSEN_TABLE;
		v_is_enable := sql_list.ENABLE;
		v_sys_owner := sql_list.SYS_OWNER;
        IF UPPER(v_table_name) = UPPER(in_tablename) THEN
			v_not_found_error := FALSE;
			DBMS_OUTPUT.PUT_LINE('Processing table_name=' || v_table_name || '; SYS_OWNER=' || v_sys_owner || '; IS_ENABLE=' || v_is_enable);

			v_sql_text := sql_list.SQL_TEXT;
			v_find_oldest_date_sql_text := sql_list.FIND_OLDEST_DATE_SQL_TEXT;
			--DBMS_OUTPUT.PUT_LINE('find_oldest_date_sql_text=' || v_find_oldest_date_sql_text);
			--EXECUTE IMMEDIATE v_find_oldest_date_sql_text INTO v_oldest_date;
			DBMS_OUTPUT.PUT_LINE('v_oldest_date_strategy=' || v_oldest_date_strategy);
			IF v_oldest_date_strategy = 0 THEN
				DBMS_OUTPUT.PUT_LINE('find_oldest_date_sql_text=' || v_find_oldest_date_sql_text);
				EXECUTE IMMEDIATE v_find_oldest_date_sql_text INTO v_oldest_date;
			ELSIF v_oldest_date_strategy = 1 THEN
				v_oldest_date := v_customer_oldest_date;
			ELSIF v_oldest_date_strategy = 2 THEN
				--v_oldest_date := v_default_oldest_date
				RAISE_APPLICATION_ERROR(-20003, 'LESSEN_TABLE.OLDEST_DATE_STRATEGY[ ' || v_oldest_date_strategy || ' ]，使用未定義的值!');
			ELSE
				RAISE_APPLICATION_ERROR(-20003, 'LESSEN_TABLE.OLDEST_DATE_STRATEGY[ ' || v_oldest_date_strategy || ' ]，使用未定義的值!');
			END IF; 
			
			select (v_baseline_date - v_oldest_date) into v_diffdates from dual;
			dbms_output.put_line('baseline_date= ' || v_baseline_date || '; oldest_date=' || v_oldest_date || '; diffdates=' || v_diffdates);

			INSERT INTO LESSEN_TABLE_EXEC_SQL 
			VALUES(v_job_id, 'RUNNING', v_table_name, v_sys_owner, v_is_enable, v_baseline_date, v_oldest_date, v_diffdates
			, v_find_oldest_date_sql_text, v_sql_text, NULL, NULL);
			commit;

			IF v_is_enable = 'Y' and v_diffdates > 0 THEN
				l_counter := 0;
				v_lv3_error_occurred := FALSE;
				LOOP 
				BEGIN
					v_timestart := SYSTIMESTAMP;
					-- 迴圈中每執行一次 l_counter就+1
					 IF l_counter >= v_diffdates THEN              -- 直到 l_counter 大於 diffdates 進IF條件然後Exit 
						EXIT; 
					 END IF;   
					 l_counter := l_counter + 1;  
					 
					 dbms_output.put_line( 'Inside loop:' || l_counter ) ; 
					 
					 select (v_oldest_date +  l_counter-1) into v_start_date from dual;
					 select (v_oldest_date +  l_counter) into v_end_date from dual;
					 v_sql_para := 'set_is_old_data=' || v_set_is_old_data || '; reverse_is_old_data=' || v_reverse_is_old_data || '; start_date=' || v_start_date || '; end_date=' || v_end_date;
					 --dbms_output.put_line( 'will execute sql=' || v_sql_text ) ; 
					 --dbms_output.put_line('set_is_old_data=' || v_set_is_old_data || '; start_date=' || v_start_date || '; end_date=' || v_end_date) ; 
					 
					 --dbms_output.enable;
					 cur_upd_LESSEN_TABLE:=dbms_sql.open_cursor;
					 dbms_sql.parse(cur_upd_LESSEN_TABLE, v_sql_text, dbms_sql.native);
					 dbms_sql.bind_variable(cur_upd_LESSEN_TABLE,'set_is_old_data',v_set_is_old_data);
					 dbms_sql.bind_variable(cur_upd_LESSEN_TABLE,'reverse_is_old_data',v_reverse_is_old_data);
					 dbms_sql.bind_variable(cur_upd_LESSEN_TABLE,'start_date',v_start_date);
					 dbms_sql.bind_variable(cur_upd_LESSEN_TABLE,'end_date',v_end_date);
					 v_row:=dbms_sql.execute(cur_upd_LESSEN_TABLE);
					 dbms_sql.close_cursor(cur_upd_LESSEN_TABLE);
					 v_timeend := SYSTIMESTAMP;
					 v_elapsed := v_timeend-v_timestart;
					 
					 --dbms_output.put_line('Start: ' || v_timestart || ';  End: '||v_timeend);  
					 dbms_output.put_line('Elapsed Seconds: '|| v_elapsed); 
					 dbms_output.put_line( 'affected rows =' || v_row ) ; 
					 dbms_output.put_line('===========================');
					 
					 INSERT INTO LESSEN_TABLE_EXEC_SQL_DETAIL VALUES(v_job_id, v_table_name, l_counter, v_timestart, v_timeend, v_elapsed, v_row, v_sql_para, 0, NULL);
					 commit;
				EXCEPTION
					WHEN OTHERS THEN
					  v_lv3_error_occurred := TRUE;
					  v_haserror := TRUE;
					  v_err_code := SQLCODE;
					  v_err_msg := SQLERRM;
					  ROLLBACK;
					  INSERT INTO LESSEN_TABLE_EXEC_SQL_DETAIL VALUES(v_job_id, v_table_name, l_counter, v_timestart, SYSTIMESTAMP
					  , SYSTIMESTAMP-v_timestart, 0, v_sql_para, v_err_code, v_err_msg);
					  commit;
					  dbms_output.put_line( '[例外處理3]SQLCODE : ['||SQLCODE||']' );
					  dbms_output.put_line( '[例外處理3]SQLERRM : ['||SQLERRM||']' );
				END;
				END LOOP;  
			END IF;  
			
            IF v_lv3_error_occurred  THEN
                UPDATE LESSEN_TABLE_EXEC_SQL SET STATUS = 'WARNING', SQL_CODE=0 WHERE JOB_ID = v_job_id AND LESSEN_TABLE = v_table_name;
            ELSE
                UPDATE LESSEN_TABLE_EXEC_SQL SET STATUS = 'COMPLETE', SQL_CODE=0 WHERE JOB_ID = v_job_id AND LESSEN_TABLE = v_table_name;
            END IF;			
			commit;
		ELSE
			DBMS_OUTPUT.PUT_LINE('Skip table_name=' || v_table_name || '; SYS_OWNER=' || v_SYS_OWNER || '; IS_ENABLE=' || v_is_enable);
		END IF;
		
    EXCEPTION
        WHEN OTHERS THEN
		  v_lv2_error_occurred := TRUE;
		  v_haserror := TRUE;
          v_err_code := SQLCODE;
          v_err_msg := SQLERRM;
		  ROLLBACK;
          UPDATE LESSEN_TABLE_EXEC_SQL SET STATUS='ERROR', SQL_CODE=v_err_code, SQL_ERRM=v_err_msg  
		  WHERE JOB_ID = v_job_id AND LESSEN_TABLE = v_table_name;
          commit;
          dbms_output.put_line( '[例外處理2]SQLCODE : ['||SQLCODE||']' );
          dbms_output.put_line( '[例外處理2]SQLERRM : ['||SQLERRM||']' );
    END;
    END LOOP;
	
	IF v_not_found_error THEN
		RAISE_APPLICATION_ERROR(-20002, '輸入參數in_tablename[ ' || in_tablename || ' ]，在LESSEN_TABLE中找不到定義!');
	END IF;
    
    IF v_lv2_error_occurred or v_haserror  THEN
        UPDATE LESSEN_TABLE_EXEC_JOB SET STATUS='WARNING', SQL_CODE=0, FUNC_END_TIME=SYSTIMESTAMP WHERE JOB_ID = v_job_id;
    ELSE
        UPDATE LESSEN_TABLE_EXEC_JOB SET STATUS='COMPLETE', SQL_CODE=0, FUNC_END_TIME=SYSTIMESTAMP WHERE JOB_ID = v_job_id;
    END IF;
    commit;
EXCEPTION
   WHEN OTHERS THEN
      v_err_code := SQLCODE;
      v_err_msg := SQLERRM;
	  ROLLBACK;
      UPDATE LESSEN_TABLE_EXEC_JOB SET STATUS='ERROR', FUNC_END_TIME=SYSTIMESTAMP, SQL_CODE=v_err_code, SQL_ERRM=v_err_msg  
	  WHERE JOB_ID = v_job_id;
      commit;
      dbms_output.put_line( '[例外處理1]SQLCODE : ['||SQLCODE||']' );
      dbms_output.put_line( '[例外處理1]SQLERRM : ['||SQLERRM||']' );
END;
/

CREATE PUBLIC SYNONYM USP_UPD_TBL_IS_OLD_DATA FOR TRW.USP_UPD_TBL_IS_OLD_DATA;

--開發
GRANT EXECUTE ON TRW.USP_UPD_TBL_IS_OLD_DATA TO APADMIN; 

--測試
GRANT EXECUTE ON TRW.USP_UPD_TBL_IS_OLD_DATA TO AP_ROLE, OMP_ROLE, SSP_ROLE, TMS_ROLE, TWS_ROLE, PMS_ROLE; 


EXEC USP_UPD_TBL_IS_OLD_DATA(TRUE,31,'SSP_CHOT_TRAN_TRI_COUP');

select * from LESSEN_TABLE_EXEC_JOB;
select * from LESSEN_TABLE_EXEC_SQL;
select * from LESSEN_TABLE_EXEC_SQL_DETAIL;

select count(*) from SSP_CHOT_TRAN_TRI_COUP where is_old_data = 'Y';

select * from SSP_CHOT_TRAN_TRI_COUP where is_old_data = 'Y';

select * from SSP_CHOT_TRAN_CAP_HIS where is_old_data = 'Y';

truncate table LOSE_WEIGHT_TABLE_EXEC_HIS;




